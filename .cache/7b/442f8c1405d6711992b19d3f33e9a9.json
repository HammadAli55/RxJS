{"id":"index.js","dependencies":[{"name":"/Users/hammadshah/Developer/rxjs/package.json","includedInParent":true,"mtime":1668581806122},{"name":"rxjs","loc":{"line":1,"column":19,"index":19},"parent":"/Users/hammadshah/Developer/rxjs/src/index.js","resolved":"/Users/hammadshah/Developer/rxjs/node_modules/rxjs/dist/esm5/index.js"},{"name":"rxjs/operators","loc":{"line":2,"column":23,"index":49},"parent":"/Users/hammadshah/Developer/rxjs/src/index.js","resolved":"/Users/hammadshah/Developer/rxjs/node_modules/rxjs/dist/esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\n/* Reduce - \n  Applies an accumulator function over the source Observable, and \n  returns the accumulated result when the source completes, given an \n  optional seed value.\n  \n  Seed value '0': \n  It is optional and represents starting value. \n  Starting value should start at 0 where new numbers are added in seed value.\n\n  Accumulator (acc): \n  Stores value previously return by this function. \n  Value (val): It references the value emitted by the observable\n*/\n\nvar observable = (0, _rxjs.of)(1, 2, 3, 4, 5).pipe((0, _operators.reduce)(function (acc, val) {\n  return acc + val;\n}, 0));\nobservable.subscribe({\n  next: function next(val) {\n    console.log(val);\n  },\n  complete: function complete() {\n    console.log('completed');\n  }\n});"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"index.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":10,"column":0},"source":"index.js","original":{"line":9,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":13,"column":0},"source":"index.js","original":{"line":12,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":19,"column":0},"source":"index.js","original":{"line":18,"column":0}},{"generated":{"line":19,"column":4},"source":"index.js","original":{"line":18,"column":6},"name":"observable"},{"generated":{"line":19,"column":14},"source":"index.js","original":{"line":18,"column":16}},{"generated":{"line":19,"column":17},"source":"index.js","original":{"line":18,"column":19}},{"generated":{"line":19,"column":21},"source":"index.js","original":{"line":18,"column":19},"name":"of"},{"generated":{"line":19,"column":29},"source":"index.js","original":{"line":18,"column":21}},{"generated":{"line":19,"column":31},"source":"index.js","original":{"line":18,"column":22}},{"generated":{"line":19,"column":32},"source":"index.js","original":{"line":18,"column":23}},{"generated":{"line":19,"column":34},"source":"index.js","original":{"line":18,"column":24}},{"generated":{"line":19,"column":35},"source":"index.js","original":{"line":18,"column":25}},{"generated":{"line":19,"column":37},"source":"index.js","original":{"line":18,"column":26}},{"generated":{"line":19,"column":38},"source":"index.js","original":{"line":18,"column":27}},{"generated":{"line":19,"column":40},"source":"index.js","original":{"line":18,"column":28}},{"generated":{"line":19,"column":41},"source":"index.js","original":{"line":18,"column":29}},{"generated":{"line":19,"column":43},"source":"index.js","original":{"line":18,"column":30}},{"generated":{"line":19,"column":44},"source":"index.js","original":{"line":18,"column":31}},{"generated":{"line":19,"column":45},"source":"index.js","original":{"line":18,"column":32}},{"generated":{"line":19,"column":46},"source":"index.js","original":{"line":18,"column":33},"name":"pipe"},{"generated":{"line":19,"column":50},"source":"index.js","original":{"line":18,"column":37}},{"generated":{"line":19,"column":51},"source":"index.js","original":{"line":19,"column":2}},{"generated":{"line":19,"column":55},"source":"index.js","original":{"line":19,"column":2},"name":"reduce"},{"generated":{"line":19,"column":72},"source":"index.js","original":{"line":19,"column":8}},{"generated":{"line":19,"column":74},"source":"index.js","original":{"line":20,"column":4}},{"generated":{"line":19,"column":84},"source":"index.js","original":{"line":20,"column":5},"name":"acc"},{"generated":{"line":19,"column":87},"source":"index.js","original":{"line":20,"column":8}},{"generated":{"line":19,"column":89},"source":"index.js","original":{"line":20,"column":11},"name":"val"},{"generated":{"line":19,"column":92},"source":"index.js","original":{"line":20,"column":14}},{"generated":{"line":20,"column":2},"source":"index.js","original":{"line":20,"column":14}},{"generated":{"line":20,"column":9},"source":"index.js","original":{"line":20,"column":19},"name":"acc"},{"generated":{"line":20,"column":12},"source":"index.js","original":{"line":20,"column":22}},{"generated":{"line":20,"column":15},"source":"index.js","original":{"line":20,"column":25},"name":"val"},{"generated":{"line":20,"column":18},"source":"index.js","original":{"line":20,"column":28}},{"generated":{"line":21,"column":0},"source":"index.js","original":{"line":20,"column":28}},{"generated":{"line":21,"column":3},"source":"index.js","original":{"line":20,"column":30}},{"generated":{"line":21,"column":4},"source":"index.js","original":{"line":20,"column":31}},{"generated":{"line":21,"column":5},"source":"index.js","original":{"line":21,"column":3}},{"generated":{"line":21,"column":6},"source":"index.js","original":{"line":22,"column":1}},{"generated":{"line":22,"column":0},"source":"index.js","original":{"line":24,"column":0},"name":"observable"},{"generated":{"line":22,"column":10},"source":"index.js","original":{"line":24,"column":10}},{"generated":{"line":22,"column":11},"source":"index.js","original":{"line":24,"column":11},"name":"subscribe"},{"generated":{"line":22,"column":20},"source":"index.js","original":{"line":24,"column":20}},{"generated":{"line":22,"column":21},"source":"index.js","original":{"line":24,"column":21}},{"generated":{"line":23,"column":2},"source":"index.js","original":{"line":25,"column":4},"name":"next"},{"generated":{"line":23,"column":6},"source":"index.js","original":{"line":25,"column":8}},{"generated":{"line":23,"column":8},"source":"index.js","original":{"line":25,"column":10}},{"generated":{"line":23,"column":22},"source":"index.js","original":{"line":25,"column":11},"name":"val"},{"generated":{"line":23,"column":25},"source":"index.js","original":{"line":25,"column":14}},{"generated":{"line":23,"column":27},"source":"index.js","original":{"line":25,"column":19}},{"generated":{"line":24,"column":4},"source":"index.js","original":{"line":26,"column":6},"name":"console"},{"generated":{"line":24,"column":11},"source":"index.js","original":{"line":26,"column":13}},{"generated":{"line":24,"column":12},"source":"index.js","original":{"line":26,"column":14},"name":"log"},{"generated":{"line":24,"column":15},"source":"index.js","original":{"line":26,"column":17}},{"generated":{"line":24,"column":16},"source":"index.js","original":{"line":26,"column":18},"name":"val"},{"generated":{"line":24,"column":19},"source":"index.js","original":{"line":26,"column":21}},{"generated":{"line":24,"column":20},"source":"index.js","original":{"line":26,"column":22}},{"generated":{"line":25,"column":2},"source":"index.js","original":{"line":27,"column":4}},{"generated":{"line":25,"column":3},"source":"index.js","original":{"line":27,"column":5}},{"generated":{"line":26,"column":2},"source":"index.js","original":{"line":28,"column":4},"name":"complete"},{"generated":{"line":26,"column":10},"source":"index.js","original":{"line":28,"column":12}},{"generated":{"line":26,"column":12},"source":"index.js","original":{"line":28,"column":14}},{"generated":{"line":26,"column":32},"source":"index.js","original":{"line":28,"column":20}},{"generated":{"line":27,"column":4},"source":"index.js","original":{"line":29,"column":6},"name":"console"},{"generated":{"line":27,"column":11},"source":"index.js","original":{"line":29,"column":13}},{"generated":{"line":27,"column":12},"source":"index.js","original":{"line":29,"column":14},"name":"log"},{"generated":{"line":27,"column":15},"source":"index.js","original":{"line":29,"column":17}},{"generated":{"line":27,"column":16},"source":"index.js","original":{"line":29,"column":18}},{"generated":{"line":27,"column":27},"source":"index.js","original":{"line":29,"column":29}},{"generated":{"line":27,"column":28},"source":"index.js","original":{"line":29,"column":30}},{"generated":{"line":28,"column":2},"source":"index.js","original":{"line":30,"column":4}},{"generated":{"line":29,"column":0},"source":"index.js","original":{"line":31,"column":2}},{"generated":{"line":29,"column":1},"source":"index.js","original":{"line":31,"column":3}},{"generated":{"line":29,"column":2},"source":"index.js","original":{"line":32,"column":1}}],"sources":{"index.js":"import { of } from 'rxjs'\nimport { reduce } from 'rxjs/operators'\n\n/* Reduce - \n  Applies an accumulator function over the source Observable, and \n  returns the accumulated result when the source completes, given an \n  optional seed value.\n  \n  Seed value '0': \n  It is optional and represents starting value. \n  Starting value should start at 0 where new numbers are added in seed value.\n\n  Accumulator (acc): \n  Stores value previously return by this function. \n  Value (val): It references the value emitted by the observable\n*/\n\nconst observable = of(1,2,3,4,5).pipe(\n  reduce(\n    (acc,  val) => acc + val, 0\n  )\n)\n\nobservable.subscribe({\n    next: (val) => {\n      console.log(val)\n    },\n    complete: () => {\n      console.log('completed')\n    }\n  }\n)"},"lineCount":null}},"error":null,"hash":"c295c11004f24deef4e7935127855e2a","cacheData":{"env":{}}}