{"id":"index.js","dependencies":[{"name":"/Users/hammadshah/Developer/rxjs/package.json","includedInParent":true,"mtime":1668581806122},{"name":"rxjs","loc":{"line":1,"column":25,"index":25},"parent":"/Users/hammadshah/Developer/rxjs/src/index.js","resolved":"/Users/hammadshah/Developer/rxjs/node_modules/rxjs/dist/esm5/index.js"},{"name":"rxjs/operators","loc":{"line":2,"column":27,"index":59},"parent":"/Users/hammadshah/Developer/rxjs/src/index.js","resolved":"/Users/hammadshah/Developer/rxjs/node_modules/rxjs/dist/esm5/operators/index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\n/* Scan - \n  Applies an accumulator function over the source Observable, and \n  returns the accumulated result on each source emission, given an \n  optional seed value. Work same like Reduce operator but reduce\n  will emit only once on compilation\n  \n  Seed value '0': \n  It is optional and represents starting value. \n  Starting value should start at 0 where new numbers are added in seed value.\n\n  Accumulator (acc): \n  Stores value previously return by this function. \n  Value (val): It references the value emitted by the observable\n*/\n\nvar observable = (0, _rxjs.interval)('500').pipe(\n// take the first emitted value from scan operator then complete\n(0, _operators.take)(5), (0, _operators.scan)(function (acc, val) {\n  return acc + val;\n}, 0));\nobservable.subscribe({\n  next: function next(val) {\n    console.log(val);\n  },\n  complete: function complete() {\n    console.log('completed');\n  }\n});"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":0},"source":"index.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":10,"column":0},"source":"index.js","original":{"line":9,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":13,"column":0},"source":"index.js","original":{"line":12,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":18,"column":0},"source":"index.js","original":{"line":17,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":19,"column":0}},{"generated":{"line":20,"column":4},"source":"index.js","original":{"line":19,"column":6},"name":"observable"},{"generated":{"line":20,"column":14},"source":"index.js","original":{"line":19,"column":16}},{"generated":{"line":20,"column":17},"source":"index.js","original":{"line":19,"column":19}},{"generated":{"line":20,"column":21},"source":"index.js","original":{"line":19,"column":19},"name":"interval"},{"generated":{"line":20,"column":35},"source":"index.js","original":{"line":19,"column":27}},{"generated":{"line":20,"column":37},"source":"index.js","original":{"line":19,"column":28}},{"generated":{"line":20,"column":42},"source":"index.js","original":{"line":19,"column":33}},{"generated":{"line":20,"column":43},"source":"index.js","original":{"line":19,"column":34}},{"generated":{"line":20,"column":44},"source":"index.js","original":{"line":19,"column":35},"name":"pipe"},{"generated":{"line":20,"column":48},"source":"index.js","original":{"line":19,"column":39}},{"generated":{"line":21,"column":0},"source":"index.js","original":{"line":20,"column":2}},{"generated":{"line":22,"column":0},"source":"index.js","original":{"line":21,"column":2}},{"generated":{"line":22,"column":4},"source":"index.js","original":{"line":21,"column":2},"name":"take"},{"generated":{"line":22,"column":19},"source":"index.js","original":{"line":21,"column":6}},{"generated":{"line":22,"column":21},"source":"index.js","original":{"line":21,"column":7}},{"generated":{"line":22,"column":22},"source":"index.js","original":{"line":21,"column":8}},{"generated":{"line":22,"column":23},"source":"index.js","original":{"line":21,"column":9}},{"generated":{"line":22,"column":25},"source":"index.js","original":{"line":22,"column":2}},{"generated":{"line":22,"column":29},"source":"index.js","original":{"line":22,"column":2},"name":"scan"},{"generated":{"line":22,"column":44},"source":"index.js","original":{"line":22,"column":6}},{"generated":{"line":22,"column":46},"source":"index.js","original":{"line":23,"column":4}},{"generated":{"line":22,"column":56},"source":"index.js","original":{"line":23,"column":5},"name":"acc"},{"generated":{"line":22,"column":59},"source":"index.js","original":{"line":23,"column":8}},{"generated":{"line":22,"column":61},"source":"index.js","original":{"line":23,"column":11},"name":"val"},{"generated":{"line":22,"column":64},"source":"index.js","original":{"line":23,"column":14}},{"generated":{"line":23,"column":2},"source":"index.js","original":{"line":23,"column":14}},{"generated":{"line":23,"column":9},"source":"index.js","original":{"line":23,"column":19},"name":"acc"},{"generated":{"line":23,"column":12},"source":"index.js","original":{"line":23,"column":22}},{"generated":{"line":23,"column":15},"source":"index.js","original":{"line":23,"column":25},"name":"val"},{"generated":{"line":23,"column":18},"source":"index.js","original":{"line":23,"column":28}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":23,"column":28}},{"generated":{"line":24,"column":3},"source":"index.js","original":{"line":23,"column":30}},{"generated":{"line":24,"column":4},"source":"index.js","original":{"line":23,"column":31}},{"generated":{"line":24,"column":5},"source":"index.js","original":{"line":24,"column":3}},{"generated":{"line":24,"column":6},"source":"index.js","original":{"line":25,"column":1}},{"generated":{"line":25,"column":0},"source":"index.js","original":{"line":27,"column":0},"name":"observable"},{"generated":{"line":25,"column":10},"source":"index.js","original":{"line":27,"column":10}},{"generated":{"line":25,"column":11},"source":"index.js","original":{"line":27,"column":11},"name":"subscribe"},{"generated":{"line":25,"column":20},"source":"index.js","original":{"line":27,"column":20}},{"generated":{"line":25,"column":21},"source":"index.js","original":{"line":27,"column":21}},{"generated":{"line":26,"column":2},"source":"index.js","original":{"line":28,"column":4},"name":"next"},{"generated":{"line":26,"column":6},"source":"index.js","original":{"line":28,"column":8}},{"generated":{"line":26,"column":8},"source":"index.js","original":{"line":28,"column":10}},{"generated":{"line":26,"column":22},"source":"index.js","original":{"line":28,"column":11},"name":"val"},{"generated":{"line":26,"column":25},"source":"index.js","original":{"line":28,"column":14}},{"generated":{"line":26,"column":27},"source":"index.js","original":{"line":28,"column":19}},{"generated":{"line":27,"column":4},"source":"index.js","original":{"line":29,"column":6},"name":"console"},{"generated":{"line":27,"column":11},"source":"index.js","original":{"line":29,"column":13}},{"generated":{"line":27,"column":12},"source":"index.js","original":{"line":29,"column":14},"name":"log"},{"generated":{"line":27,"column":15},"source":"index.js","original":{"line":29,"column":17}},{"generated":{"line":27,"column":16},"source":"index.js","original":{"line":29,"column":18},"name":"val"},{"generated":{"line":27,"column":19},"source":"index.js","original":{"line":29,"column":21}},{"generated":{"line":27,"column":20},"source":"index.js","original":{"line":29,"column":22}},{"generated":{"line":28,"column":2},"source":"index.js","original":{"line":30,"column":4}},{"generated":{"line":28,"column":3},"source":"index.js","original":{"line":30,"column":5}},{"generated":{"line":29,"column":2},"source":"index.js","original":{"line":31,"column":4},"name":"complete"},{"generated":{"line":29,"column":10},"source":"index.js","original":{"line":31,"column":12}},{"generated":{"line":29,"column":12},"source":"index.js","original":{"line":31,"column":14}},{"generated":{"line":29,"column":32},"source":"index.js","original":{"line":31,"column":20}},{"generated":{"line":30,"column":4},"source":"index.js","original":{"line":32,"column":6},"name":"console"},{"generated":{"line":30,"column":11},"source":"index.js","original":{"line":32,"column":13}},{"generated":{"line":30,"column":12},"source":"index.js","original":{"line":32,"column":14},"name":"log"},{"generated":{"line":30,"column":15},"source":"index.js","original":{"line":32,"column":17}},{"generated":{"line":30,"column":16},"source":"index.js","original":{"line":32,"column":18}},{"generated":{"line":30,"column":27},"source":"index.js","original":{"line":32,"column":29}},{"generated":{"line":30,"column":28},"source":"index.js","original":{"line":32,"column":30}},{"generated":{"line":31,"column":2},"source":"index.js","original":{"line":33,"column":4}},{"generated":{"line":32,"column":0},"source":"index.js","original":{"line":34,"column":2}},{"generated":{"line":32,"column":1},"source":"index.js","original":{"line":34,"column":3}},{"generated":{"line":32,"column":2},"source":"index.js","original":{"line":35,"column":1}}],"sources":{"index.js":"import { interval } from 'rxjs'\nimport { scan, take } from 'rxjs/operators'\n\n/* Scan - \n  Applies an accumulator function over the source Observable, and \n  returns the accumulated result on each source emission, given an \n  optional seed value. Work same like Reduce operator but reduce\n  will emit only once on compilation\n  \n  Seed value '0': \n  It is optional and represents starting value. \n  Starting value should start at 0 where new numbers are added in seed value.\n\n  Accumulator (acc): \n  Stores value previously return by this function. \n  Value (val): It references the value emitted by the observable\n*/\n\nconst observable = interval('500').pipe(\n  // take the first emitted value from scan operator then complete\n  take(5),\n  scan(\n    (acc,  val) => acc + val, 0\n  )\n)\n\nobservable.subscribe({\n    next: (val) => {\n      console.log(val)\n    },\n    complete: () => {\n      console.log('completed')\n    }\n  }\n)"},"lineCount":null}},"error":null,"hash":"e558d1c4edb2d148da58949421744395","cacheData":{"env":{}}}